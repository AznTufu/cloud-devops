name: CI/CD Pipeline Todo App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  CLIENT_IMAGE: ${{ secrets.DOCKER_USERNAME }}/cloud-devops-app-frontend
  SERVER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/cloud-devops-app-backend

jobs:
  # Job 1: Build et Test
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📦 Install server dependencies
        run: |
          cd server
          npm install

      - name: 📦 Install client dependencies  
        run: |
          cd client
          npm install

      - name: 🔧 Build client
        run: |
          cd client
          npm run build

      - name: ✅ Test completed
        run: echo "✅ Tests passed successfully!"

  # Job 2: Build et Push Docker Images
  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏷️ Extract metadata
        id: meta
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          echo "DATE=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "VERSION=v1.0.${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT

      - name: 🏗️ Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: |
            ${{ env.SERVER_IMAGE }}:latest
            ${{ env.SERVER_IMAGE }}:${{ steps.meta.outputs.VERSION }}
            ${{ env.SERVER_IMAGE }}:${{ steps.meta.outputs.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: |
            ${{ env.CLIENT_IMAGE }}:latest
            ${{ env.CLIENT_IMAGE }}:${{ steps.meta.outputs.VERSION }}
            ${{ env.CLIENT_IMAGE }}:${{ steps.meta.outputs.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📋 Display image info
        run: |
          echo "✅ Images pushed successfully!"
          echo "🖥️  Server image: ${{ env.SERVER_IMAGE }}:latest"
          echo "🌐 Client image: ${{ env.CLIENT_IMAGE }}:latest"
          echo "🏷️  Version: ${{ steps.meta.outputs.VERSION }}"
          echo "📦 SHA: ${{ steps.meta.outputs.SHORT_SHA }}"

  # Job 3: Deploy to AWS with Terraform
  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏷️ Get image info
        id: image-info
        run: |
          echo "VERSION=v1.0.${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT

      - name: � Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: � Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: 🏗️ Update Terraform variables with new image tags
        run: |
          cd infra/terraform
          # Créer un fichier tfvars temporaire avec les nouvelles images
          cat >> terraform.tfvars.tmp << EOF
          server_image_tag = "${{ steps.image-info.outputs.VERSION }}"
          client_image_tag = "${{ steps.image-info.outputs.VERSION }}"
          docker_hub_username = "${{ secrets.DOCKER_USERNAME }}"
          EOF
          # Fusionner avec le fichier existant
          cat terraform.tfvars terraform.tfvars.tmp > terraform.tfvars.new
          mv terraform.tfvars.new terraform.tfvars
          rm terraform.tfvars.tmp

      - name: 🔍 Terraform Init
        run: |
          cd infra/terraform
          terraform init

      - name: 📋 Terraform Plan
        run: |
          cd infra/terraform
          terraform plan -out=tfplan

      - name: 🚀 Terraform Apply
        run: |
          cd infra/terraform
          terraform apply -auto-approve tfplan

      - name: 📊 Get deployment outputs
        id: terraform-outputs
        run: |
          cd infra/terraform
          echo "public_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
          echo "public_dns=$(terraform output -raw instance_public_dns)" >> $GITHUB_OUTPUT

      - name: ⏳ Wait for application to be ready
        run: |
          echo "⏳ Attente que l'application soit prête..."
          sleep 60
          
          # Vérifier que l'application répond
          max_retries=10
          retry_count=0
          
          while [ $retry_count -lt $max_retries ]; do
            if curl -f -s "http://${{ steps.terraform-outputs.outputs.public_ip }}" > /dev/null; then
              echo "✅ Application prête !"
              break
            else
              echo "⏳ Tentative $((retry_count + 1))/$max_retries - En attente..."
              sleep 30
              retry_count=$((retry_count + 1))
            fi
          done

      - name: 🎉 Deployment success notification
        run: |
          echo "::notice title=Deployment Success::🎉 Application deployed successfully on AWS!"
          echo "::notice title=Public IP::${{ steps.terraform-outputs.outputs.public_ip }}"
          echo "::notice title=Public DNS::${{ steps.terraform-outputs.outputs.public_dns }}"
          echo "::notice title=Frontend URL::http://${{ steps.terraform-outputs.outputs.public_ip }}"
          echo "::notice title=Backend URL::http://${{ steps.terraform-outputs.outputs.public_ip }}:3005"
          echo ""
          echo "🌐 Application accessible à :"
          echo "   - Frontend: http://${{ steps.terraform-outputs.outputs.public_ip }}"
          echo "   - Backend API: http://${{ steps.terraform-outputs.outputs.public_ip }}:3005"
          echo "   - DNS: http://${{ steps.terraform-outputs.outputs.public_dns }}"
